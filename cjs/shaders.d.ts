export declare const vertexShaderSource = "\nattribute vec3 a_position;\nattribute vec2 a_offset;\nattribute vec2 a_normal;\nattribute float a_value;\n\nuniform vec2 u_value_range;\n\nuniform mat4 u_model;\nuniform float u_height;\nuniform float u_size;\n\nuniform vec2 u_hue_range;\nuniform vec2 u_saturation_range;\nuniform vec2 u_light_range;\nuniform float u_alpha;\n\nuniform vec2 u_light_direction;\nuniform float u_light_influence;\n\nvarying vec4 v_color;\n\nfloat hueToRgb(float p, float q, float t) {\n    if (t < 0.0) t += 1.0;\n    if (t > 1.0) t -= 1.0;\n    if (t < 0.166666) return p + (q - p) * 6.0 * t;\n    if (t < 0.5) return q;\n    if (t < 0.666666) return p + (q - p) * (0.666666 - t) * 6.0;\n\n    return p;\n}\n\nvec3 hslToRgb(float h, float s, float l) {\n    // Achromatic\n    if (s == 0.0) return vec3(l, l, l);\n    h /= 360.0;\n\n    float q = l < 0.5 ? l * (1.0 + s) : l + s - l * s;\n    float p = 2.0 * l - q;\n\n    return vec3(\n        hueToRgb(p, q, h + 0.333333),\n        hueToRgb(p, q, h),\n        hueToRgb(p, q, h - 0.333333)\n    );\n}\n\nvoid main(void) {\n    float value = max(min(a_value, u_value_range.y), u_value_range.x);\n    value = (value - u_value_range.x) / (u_value_range.y - u_value_range.x);\n\n    float light_weight = 1.0 + u_light_influence * (abs(dot(u_light_direction, a_normal)) - 1.0);\n    if (a_normal.x == 0.0 && a_normal.y == 0.0) {\n        light_weight = 1.0;\n    }\n\n    float hue = mix(u_hue_range.x, u_hue_range.y, value);\n    float saturation = mix(u_saturation_range.x, u_saturation_range.y, value);\n    float light = mix(u_light_range.x, u_light_range.y, value);\n    vec3 rgb = hslToRgb(hue, saturation, light);\n    v_color = vec4(rgb * light_weight, u_alpha);\n\n    gl_Position = u_model * vec4(\n        vec2(a_position.xy + a_offset * u_size),\n        a_position.z * u_height * value,\n        1.0\n    );\n}\n";
export declare const fragmentShaderSource = "\nprecision mediump float;\n\nvarying vec4 v_color;\n\nvoid main(void) {\n    gl_FragColor = v_color;\n}\n";
